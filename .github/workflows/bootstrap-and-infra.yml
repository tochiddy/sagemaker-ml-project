name: bootstrap-remote-state-and-infra

on:
  push:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  TF_STATE_BUCKET: ${{ vars.TF_STATE_BUCKET }}
  TF_LOCK_TABLE: ${{ vars.TF_LOCK_TABLE }}

jobs:
  bootstrap:
    name: Bootstrap remote state (S3 + DynamoDB)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: bootstrap
    steps:
      - uses: actions/checkout@v4

      # ---- AUTH FOR BOOTSTRAP ----
      # Option A: OIDC to an existing role (preferred once you have it)
      # - name: Configure AWS credentials via OIDC (existing role)
      #   if: ${{ secrets.AWS_ROLE_TO_ASSUME != '' }}
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      #     aws-region: ${{ env.AWS_REGION }}

      # Option B: TEMP access keys ONLY for very first run, then delete them
      - name: Configure AWS credentials via access keys (TEMP first run)
        if: ${{ secrets.AWS_ROLE_TO_ASSUME == '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate required vars
        run: |
          : "${TF_STATE_BUCKET:?Set repo variable TF_STATE_BUCKET}"
          : "${TF_LOCK_TABLE:?Set repo variable TF_LOCK_TABLE}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init (local backend)
        run: terraform init -input=false

      - name: Terraform Fmt & Validate
        run: |
          terraform fmt -check
          terraform validate

      - name: Terraform Plan (PR only)
        if: github.event_name == 'pull_request'
        run: |
          terraform plan -no-color -input=false \
            -var "aws_region=${AWS_REGION}" \
            -var "tf_state_bucket=${TF_STATE_BUCKET}" \
            -var "tf_lock_table=${TF_LOCK_TABLE}" \
            -var "github_repo=${{ github.repository }}"

      - name: Terraform Apply (main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          terraform apply -auto-approve -input=false \
            -var "aws_region=${AWS_REGION}" \
            -var "tf_state_bucket=${TF_STATE_BUCKET}" \
            -var "tf_lock_table=${TF_LOCK_TABLE}" \
            -var "github_repo=${{ github.repository }}"

      - name: Wait for bucket/table to be ready
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          aws s3api head-bucket --bucket "$TF_STATE_BUCKET"
          aws dynamodb describe-table --table-name "$TF_LOCK_TABLE" >/dev/null

  infra:
    name: Terraform (remote backend)
    needs: bootstrap
    runs-on: ubuntu-latest
    environment: prod
    defaults:
      run:
        working-directory: infra
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Sanity check remote backend exists
        run: |
          aws s3api head-bucket --bucket "$TF_STATE_BUCKET"
          aws dynamodb describe-table --table-name "$TF_LOCK_TABLE" >/dev/null

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init (uses s3 backend from infra/backend.tf)
        run: terraform init -input=false

      - name: Terraform Fmt & Validate
        run: |
          terraform fmt -check
          terraform validate

      - name: Terraform Plan (PR only)
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false

      - name: Terraform Apply (main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -input=false
